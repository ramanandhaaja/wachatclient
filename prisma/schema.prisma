// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  resetToken         String?        @unique
  resetTokenExpires  DateTime?
  accounts           Account[]
  sessions           Session[]
  eventDuration      Int            @default(30) // 30 or 60 minutes
  availability       Availability[]
  events             Event[]
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int     // 0-6 (Sunday to Saturday)
  startTime String  // Format: "HH:mm"
  endTime   String  // Format: "HH:mm"
  user      User    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Client {
  id        String   @id @default(cuid())
  name      String
  phone     String   // For WhatsApp/contact number
  email     String?  // Optional email
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phone])
}

model Event {
  id           String   @id @default(cuid())
  userId       String
  clientId     String
  startTime    DateTime
  endTime      DateTime
  serviceType  String   // Type of service
  providerId   String?  // Optional service provider ID
  providerName String?  // Optional service provider name
  notes        String?  // Optional notes about the booking
  user         User     @relation(fields: [userId], references: [id])
  client       Client   @relation(fields: [clientId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([clientId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}